services:
  # PostgreSQL Read (6432)
  postgres:
    image: postgres:17
    container_name: postgresSQL
    environment:
      POSTGRES_DB: myapp
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password123
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "6432:5432"
    volumes:
      - ./postgres/data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d
    restart: unless-stopped


  # PgBouncer  Database (با auth_type = trust)
  pgbouncer:
    image: pgbouncer/pgbouncer
    container_name: pgbouncer
    environment:
      - DATABASES=myapp=host=postgres port=5432 dbname=myapp
      - PGBOUNCER_POOL_MODE=transaction
      - PGBOUNCER_AUTH_TYPE=trust
      - PGBOUNCER_MAX_CLIENT_CONN=100
      - PGBOUNCER_DEFAULT_POOL_SIZE=20
      - PGBOUNCER_ADMIN_USERS=admin
    ports:
      - "6433:6432"
    depends_on:
      - postgres
    restart: unless-stopped

# dragonfly
  dragonfly-1:
    image: docker.dragonflydb.io/dragonflydb/dragonfly
    container_name: dragonfly-1
    ports:
      - "9379:6379"
    volumes:
      - ./dragonfly/data1:/data
    command: [ "--dir", "/data" ]
    restart: unless-stopped

  dragonfly-2:
    image: docker.dragonflydb.io/dragonflydb/dragonfly
    container_name: dragonfly-2
    ports:
      - "9380:6379"
    volumes:
      - ./dragonfly/data2:/data
    command: [ "--dir", "/data" ]
    restart: unless-stopped

  dragonfly-3:
    image: docker.dragonflydb.io/dragonflydb/dragonfly
    container_name: dragonfly-3
    ports:
      - "9381:6379"
    volumes:
      - ./dragonfly/data3:/data
    command: [ "--dir", "/data" ]
    restart: unless-stopped

  redis:
    container_name: redis
    image: redis:7
    ports:
      - "6379:6379"
    volumes:
      - ./redis:/data
    command: bash -c 'redis-server --requirepass KkWSa7RCJ0eK9SIAHzrQaw'

  redis_insight:
    container_name: redis_insight
    image: redis/redisinsight:latest
    ports:
      - "5300:5540"
    volumes:
      - ./redis_insight_data:/db

  kafka:
    image: apache/kafka:3.7.0
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_LISTENERS: "PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://localhost:9092"
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3
    volumes:
      - ./kafka/data:/tmp/kafka-logs
    restart: unless-stopped

  haproxy:
    image: haproxy:2.8
    container_name: haproxy-test
    ports:
      - "8888:8888"
      - "9080:8080"
    volumes:
      - ./haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
    restart: unless-stopped
    depends_on:
      - postgres
